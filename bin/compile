#!/usr/bin/env bash

# bin/compile <build-dir> <cache-dir> <env-dir>

install_ext () {
    local ext=$1
    local reason=${2:-}
    local ext_ini="$BP_DIR/conf/php/conf.d/ext-$ext.ini"
    local ext_so=
    local ext_dir=$(basename $(php-config --extension-dir))
    if [[ -f "$ext_ini" ]]; then
        ext_so=$(php -r '$ini=parse_ini_file("'$ext_ini'"); echo $ext=$ini["zend_extension"]?:$ini["extension"]; exit((int)empty($ext));') # read .so name from .ini because e.g. opcache.so is named "zend-opcache"
        if [[ ! -f "$PHP_EXT_DIR/$ext_so" ]]; then
            curl --silent --location "${S3_URL}/extensions/${ext_dir}/${ext}.tar.gz" | tar xz -C $BUILD_DIR/.heroku/php
            echo "- ${ext} (${reason}; downloaded, using 'ext-${ext}.ini')" | indent
        else
            echo "- ${ext} (${reason}; bundled, using 'ext-${ext}.ini')" | indent
        fi
        cp "${ext_ini}" "${BUILD_DIR}/.heroku/php/etc/php/conf.d"
    elif [[ -f "${PHP_EXT_DIR}/${ext}.so" ]]; then
        echo "extension = ${ext}.so" > "${BUILD_DIR}/.heroku/php/etc/php/conf.d/ext-${ext}.ini"
        echo "- ${ext} (${reason}; bundled)" | indent
    elif echo -n ${ext} | php -r 'exit((int)!extension_loaded(file_get_contents("php://stdin")));'; then
        echo "- ${ext} (${reason}; enabled by default)" | indent
    else
        warning_inline "Unknown extension ${ext} (${reason}), install may fail!"
    fi
}

# fail hard
set -o pipefail
# fail harder
set -eu
# move hidden files too, just in case
shopt -s dotglob

STACK=${STACK:-cedar} # Anvil has none
BUILD_DIR=$1
CACHE_DIR=$2/php
mkdir -p "$CACHE_DIR"
ENV_DIR=${3:-} # Anvil has none
BP_DIR=$(cd $(dirname $0); cd ..; pwd)

# convenience functions
source $BP_DIR/bin/common.sh

export_env_dir "$ENV_DIR" '^[A-Z_][A-Z0-9_]*$' '^(HOME|PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH|LD_LIBRARY_PATH|STACK)$'

BUILDPACK_URL=${BUILDPACK_URL:-} # Anvil has none
BUILDPACK_BRANCH=$(expr "$BUILDPACK_URL" : '^.*/heroku-buildpack-php#\(..*\)$' || expr "$BUILDPACK_URL" : '^.*/heroku-buildpack-php\.git#\(..*\)$' || true)
BUILDPACK_BRANCH=${BUILDPACK_BRANCH:-master}
BUILDPACK_OWNER=$(expr "$BUILDPACK_URL" : '^.*/\(..*\)/heroku-buildpack-php' || true)

S3_URL="master"
if [[ "$BUILDPACK_BRANCH" != v* && "$BUILDPACK_BRANCH" != "master" ]]; then
    S3_URL="develop"
fi
S3_URL="https://lang-php.s3.amazonaws.com/dist-${STACK}-${S3_URL}"

cd $BUILD_DIR

if [[ -s "surf.json" ]]; then
    cat surf.json | python -mjson.tool &> /dev/null || error "Could not parse surf.json; make sure it's valid!"
else
    if [[ ! -f "surf.json" ]]; then
        error 'No surf.json found.
Using index.php to declare PHP applications is considered legacy
functionality and may lead to unexpected behavior.'
    else
        error 'Your surf.json is completely empty.'
    fi
fi

mkdir -p .heroku/php

export COMPOSER_HOME=$CACHE_DIR/.composer
mkdir -p $COMPOSER_HOME

PHP_VERSION="5.5.15"
DRUSH_VERSION="5.11.0"
engine="php"

# we need to run things in here, set it up!
ln -s $BUILD_DIR/.heroku /app/.heroku
export PATH=/app/.heroku/php/bin:$PATH

if [[ "${PHP_VERSION}" ]]; then
    PHP_DIST_URL="$S3_URL/php-$PHP_VERSION.tar.gz"
    echo "- PHP $PHP_VERSION" | indent
    curl --silent --location "$PHP_DIST_URL" | tar xz -C $BUILD_DIR/.heroku/php
    PHP_EXT_DIR=$(php-config --extension-dir)
    # update config files
    mkdir -p $BUILD_DIR/.heroku/php/etc/php
    cp $BP_DIR/conf/php/php.ini $BUILD_DIR/.heroku/php/etc/php
    cp $BP_DIR/conf/php/php-fpm.conf $BUILD_DIR/.heroku/php/etc/php
    mkdir -p $BUILD_DIR/.heroku/php/etc/php/conf.d
    # remember the version for future upgrade handling
    echo $PHP_VERSION > $CACHE_DIR/php_version
fi

NGINX_VERSION="1.6.0"
NGINX_DIST_URL="$S3_URL/nginx-$NGINX_VERSION.tar.gz"
echo "- Nginx $NGINX_VERSION" | indent
curl --silent --location "$NGINX_DIST_URL" | tar xz -C $BUILD_DIR/.heroku/php
# nginx; copy in our config
cp $BP_DIR/conf/nginx/nginx.conf.default $BUILD_DIR/.heroku/php/etc/nginx/nginx.conf
# remember the version for future upgrade handling
echo $NGINX_VERSION > $CACHE_DIR/nginx_version

# handle extensions for PHP
if [[ "${PHP_VERSION}" ]]; then
    status "Installing PHP extensions..."

    # the newrelic extension logs to stderr which pollutes our build output on each invocation of PHP, and the daemon it launches will prevent the build from finishing, so we disable it for the duration of this build (write to zzz-ext-newrelic.ini so the file is loaded last and overwrites the regular config). we can do this unconditionally here, no harm done if extension or add-on aren't enabled
    echo "newrelic.enabled = 0
    newrelic.loglevel = error
    newrelic.daemon.dont_launch = 3
    newrelic.daemon.loglevel = error" > "${BUILD_DIR}/.heroku/php/etc/php/conf.d/zzz-ext-newrelic.ini"

    exts=()
    if [[ -f "composer.json" ]]; then
        exts=($(cat composer.json | python -c 'from __future__ import print_function; import sys, json; { print(key[4:].lower()) for key in json.load(sys.stdin)["require"] if key.startswith("ext-")}' 2> /dev/null || true)) # convert to array
    fi
    for ext in "${!exts[@]}"; do # loop over keys in case the array is empty or else it'll error out
        install_ext "${exts[$ext]}" "composer.json"
    done

    # special treatment for New Relic; we enable it if we detect a license key for it
    # otherwise users would have to have it in their require section, which is annoying in development environments
    NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY:-}
    if [[ ( ${#exts[@]} -eq 0 || ! ${exts[*]} =~ "newrelic" ) && -n "$NEW_RELIC_LICENSE_KEY" ]]; then
        install_ext "newrelic" "add-on detected"
        exts+=("newrelic")
    fi

    if [[ ${#exts[@]} -eq 0 || ! ${exts[*]} =~ "zend-opcache" ]]; then
        install_ext "zend-opcache" "automatic"
        exts+=("zend-opcache")
    fi
fi

status "Installing dependencies..."

# check if we should use a composer.phar version bundled with the project
if [[ -f "composer.phar" ]]; then
    php -r 'new Phar("composer.phar");' &> /dev/null || error "Found composer.phar in root directory, but it appears corrupted!"
    composer() {
        $engine composer.phar "$@"
    }
    export -f composer
    composer --version 2>&1 | grep "^Composer version" > /dev/null || error "composer.phar in root directory doesn't seem to contain Composer!"
    notice_inline "Using custom composer.phar (in root dir) to install dependencies."
else
    curl --silent --location "$S3_URL/composer.tar.gz" | tar xz -C $BUILD_DIR/.heroku/php
    composer() {
        $engine `which composer` "$@"
    }
    export -f composer
    composer self-update --no-interaction --quiet # TODO: specify a version once composer has stable releases
fi
# echo composer version for info purposes
# tail to get rid of outdated version warnings (Composer sends those to STDOUT instead of STDERR)
composer --version 2> /dev/null | tail -n 1 | indent

# throw a notice if people have added their vendor dir to Git; that's bad practice and makes everything slow and cluttered
if [[ -e "$(composer config vendor-dir)" ]]; then
    warning "You have put Composer's vendor directory under version control.
That directory should not be in your Git repository; only composer.json
and composer.lock should be added, with Composer handling installation.
Please 'git rm --cached $(composer config vendor-dir)/' to remove the folder from your index,
then add '/$(composer config vendor-dir)/' to your '.gitignore' list to remove this notice.
For more information, refer to the Composer FAQ: http://bit.ly/1rlCSZU"
fi

# handle custom oauth keys
COMPOSER_GITHUB_OAUTH_TOKEN=${COMPOSER_GITHUB_OAUTH_TOKEN:-}
if [[ -n "$COMPOSER_GITHUB_OAUTH_TOKEN" ]]; then
    if curl --fail --silent -H "Authorization: token $COMPOSER_GITHUB_OAUTH_TOKEN" https://api.github.com/rate_limit > /dev/null; then
        composer config -g github-oauth.github.com "$COMPOSER_GITHUB_OAUTH_TOKEN" &> /dev/null # redirect outdated version warnings (Composer sends those to STDOUT instead of STDERR)
        notice_inline 'Using custom GitHub OAuth token in $COMPOSER_GITHUB_OAUTH_TOKEN'
    else
        error 'Invalid GitHub OAuth token in $COMPOSER_GITHUB_OAUTH_TOKEN'
    fi
else
    # don't forget to remove any stored key if it's gone from the env
    composer config -g --unset github-oauth.github.com &> /dev/null # redirect outdated version warnings (Composer sends those to STDOUT instead of STDERR)
    if curl --silent https://api.github.com/rate_limit | python -c 'import sys, json; sys.exit((json.load(sys.stdin)["resources"]["core"]["remaining"] > 0))'; then # yes, check > 0, not < 1 - exit status of 0 will trigger the if
        notice "You've reached the GitHub API's request rate limit.
Composer will now try and fall back to slower downloads from source.
It's strongly recommended you use a custom OAuth token; for details, see
http://devcenter.heroku.com/articles/php-support#custom-github-oauth-tokens"
    fi
fi
# no need for the token to stay around in the env
unset COMPOSER_GITHUB_OAUTH_TOKEN

# Install Drush
DRUSH_URL="https://github.com/drush-ops/drush/archive/$DRUSH_VERSION.tar.gz"
echo "- Drush $DRUSH_VERSION" | indent
curl --silent --max-time 60 --location -L "$DRUSH_URL" | tar xz -C $BUILD_DIR/.heroku/php
ln -s /app/.heroku/php/drush-5.11.0/drush /app/.heroku/php/bin/drush

echo $DRUSH_VERSION > $CACHE_DIR/drush_version
$(which drush) cc drush

# Install Surf
curl -s http://surf.drupal.build/install.sh | sh

ls ~/.drush/surf

$(which drush) surf-build
