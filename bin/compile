#!/usr/bin/env bash

# bin/compile <build-dir> <cache-dir> <env-dir>

install_ext () {
    local ext=$1
    local reason=${2:-}
    local ext_ini="$BP_DIR/conf/php/conf.d/ext-$ext.ini"
    local ext_so=
    local ext_dir=$(basename $(php-config --extension-dir))
    if [[ -f "$ext_ini" ]]; then
        ext_so=$(php -r '$ini=parse_ini_file("'$ext_ini'"); echo $ext=$ini["zend_extension"]?:$ini["extension"]; exit((int)empty($ext));') # read .so name from .ini because e.g. opcache.so is named "zend-opcache"
        if [[ ! -f "$PHP_EXT_DIR/$ext_so" ]]; then
            curl --silent --location "${S3_URL}/extensions/${ext_dir}/${ext}.tar.gz" | tar xz -C $BUILD_DIR/.heroku/php
            echo "- ${ext} (${reason}; downloaded, using 'ext-${ext}.ini')" | indent
        else
            echo "- ${ext} (${reason}; bundled, using 'ext-${ext}.ini')" | indent
        fi
        cp "${ext_ini}" "${BUILD_DIR}/.heroku/php/etc/php/conf.d"
    elif [[ -f "${PHP_EXT_DIR}/${ext}.so" ]]; then
        echo "extension = ${ext}.so" > "${BUILD_DIR}/.heroku/php/etc/php/conf.d/ext-${ext}.ini"
        echo "- ${ext} (${reason}; bundled)" | indent
    elif echo -n ${ext} | php -r 'exit((int)!extension_loaded(file_get_contents("php://stdin")));'; then
        echo "- ${ext} (${reason}; enabled by default)" | indent
    else
        warning_inline "Unknown extension ${ext} (${reason}), install may fail!"
    fi
}

# fail hard
set -o pipefail
# fail harder
set -eu
# move hidden files too, just in case
shopt -s dotglob

STACK=${STACK:-cedar} # Anvil has none
BUILD_DIR=$1
CACHE_DIR=$2/php
mkdir -p "$CACHE_DIR"
ENV_DIR=${3:-} # Anvil has none
BP_DIR=$(cd $(dirname $0); cd ..; pwd)

# convenience functions
source $BP_DIR/bin/common.sh

export_env_dir "$ENV_DIR" '^[A-Z_][A-Z0-9_]*$' '^(HOME|PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH|LD_LIBRARY_PATH|STACK)$'

BUILDPACK_URL=${BUILDPACK_URL:-} # Anvil has none
BUILDPACK_BRANCH=$(expr "$BUILDPACK_URL" : '^.*/heroku-buildpack-php#\(..*\)$' || expr "$BUILDPACK_URL" : '^.*/heroku-buildpack-php\.git#\(..*\)$' || true)
BUILDPACK_BRANCH=${BUILDPACK_BRANCH:-master}
BUILDPACK_OWNER=$(expr "$BUILDPACK_URL" : '^.*/\(..*\)/heroku-buildpack-php' || true)

S3_URL="master"
if [[ "$BUILDPACK_BRANCH" != v* && "$BUILDPACK_BRANCH" != "master" ]]; then
    S3_URL="develop"
fi
S3_URL="https://lang-php.s3.amazonaws.com/dist-${STACK}-${S3_URL}"

cd $BUILD_DIR

if [[ -s "surf.json" ]]; then
    cat surf.json | python -mjson.tool &> /dev/null || error "Could not parse surf.json; make sure it's valid!"
else
    if [[ ! -f "surf.json" ]]; then
        error 'No surf.json found.
Using index.php to declare PHP applications is considered legacy
functionality and may lead to unexpected behavior.'
    else
        error 'Your surf.json is completely empty.'
    fi
fi

mkdir -p .heroku/php

export COMPOSER_HOME=$CACHE_DIR/.composer
mkdir -p $COMPOSER_HOME

PHP_VERSION="5.5.15"
DRUSH_VERSION="5.11.0"
engine="php"

# we need to run things in here, set it up!
ln -s $BUILD_DIR/.heroku /app/.heroku
export PATH=/app/.heroku/php/bin:$PATH

if [[ "${PHP_VERSION}" ]]; then
    PHP_DIST_URL="$S3_URL/php-$PHP_VERSION.tar.gz"
    echo $PHP_DIST_URL
    echo "- PHP $PHP_VERSION" | indent
    curl --silent --location "$PHP_DIST_URL" | tar xz -C $BUILD_DIR/.heroku/php
    PHP_EXT_DIR=$(php-config --extension-dir)
    # update config files
    mkdir -p $BUILD_DIR/.heroku/php/etc/php
    cp $BP_DIR/conf/php/php.ini $BUILD_DIR/.heroku/php/etc/php
    cp $BP_DIR/conf/php/php-fpm.conf $BUILD_DIR/.heroku/php/etc/php
    mkdir -p $BUILD_DIR/.heroku/php/etc/php/conf.d
    # remember the version for future upgrade handling
    echo $PHP_VERSION > $CACHE_DIR/php_version
fi

#mkdir -p .heroku/php

#export COMPOSER_HOME=$CACHE_DIR/.composer
#mkdir -p $COMPOSER_HOME

#status "Installing system packages..."

# we need to run things in here, set it up!
#ln -s $BUILD_DIR/.heroku /app/.heroku
#export PATH=/app/.heroku/php/bin:$PATH

#if [[ "${PHP_VERSION}" ]]; then
#    PHP_DIST_URL="$S3_URL/php-$PHP_VERSION.tar.gz"
#    echo "- PHP $PHP_VERSION" | indent
#    curl --silent --location "$PHP_DIST_URL" | tar xz -C $BUILD_DIR/.heroku/php
#    PHP_EXT_DIR=$(php-config --extension-dir)
#    # update config files
#    mkdir -p $BUILD_DIR/.heroku/php/etc/php
#    cp $BP_DIR/conf/php/php.ini $BUILD_DIR/.heroku/php/etc/php
#    cp $BP_DIR/conf/php/php-fpm.conf $BUILD_DIR/.heroku/php/etc/php
#    mkdir -p $BUILD_DIR/.heroku/php/etc/php/conf.d
#    # remember the version for future upgrade handling
#    echo $PHP_VERSION > $CACHE_DIR/php_version
#fi

# we need to run things in here, set it up!
#ln -s $BUILD_DIR/.heroku /app/.heroku
#export PATH=/app/.heroku/php/bin:$PATH

# Load some convenience functions like status(), echo(), and indent()
#source $bp_dir/bin/common.sh

# Lets install composer

# Install Drush

# Install Surf
